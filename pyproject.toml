[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "scramblebench"
version = "0.1.0"
description = "Contamination-resistant LLM evaluation toolkit with translation and long context benchmarking"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Nathan Rice", email = "nathan.alexander.rice@gmail.com"}
]
keywords = [
    "llm", "evaluation", "benchmarking", "contamination", "ai", "nlp", 
    "language-models", "testing", "research", "translation", "longcontext"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Testing",
    "Topic :: Text Processing :: Linguistic",
    "Operating System :: OS Independent",
    "Environment :: Console",
    "Typing :: Typed",
]
requires-python = ">=3.9"
dependencies = [
    "openai>=1.0.0",
    "transformers>=4.30.0",
    "datasets>=2.14.0",
    "torch>=2.0.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "pyyaml>=6.0",
    "pydantic>=2.0.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
    "tqdm>=4.65.0",
    "aiohttp>=3.8.0",
    "tenacity>=8.2.0",
    "click>=8.0.0",
    "colorama>=0.4.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
    "scikit-learn>=1.3.0",
    "scipy>=1.11.0",
    "pyarrow>=12.0.0",
    "duckdb>=0.9.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "streamlit>=1.28.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.7.0",
    "ruff>=0.0.285",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "jupyter>=1.0.0",
    "ipython>=8.14.0",
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "sphinx-copybutton>=0.5.2",
    "myst-parser>=2.0.0",
    "sphinxcontrib-mermaid>=0.9.2",
    "nbsphinx>=0.9.1",
    "ipython>=8.14.0",
]
nlp = [
    "nltk>=3.8.0",
    "spacy>=3.5.0",
]

[project.urls]
Homepage = "https://github.com/sibyllinesoft/scramblebench"
Repository = "https://github.com/sibyllinesoft/scramblebench"
Documentation = "https://github.com/sibyllinesoft/scramblebench#readme"
"Bug Tracker" = "https://github.com/sibyllinesoft/scramblebench/issues"

[project.scripts]
scramblebench = "scramblebench.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src/scramblebench"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/configs",
    "/README.md",
    "/LICENSE",
]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 88
target-version = "py39"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]